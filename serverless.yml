org: refririfwan
app: iot-platform-app
service: iot-platform

provider:
  name: aws
  runtime: nodejs16.x
  environment:
    USERS_POOL_ID: { Ref: UserPool }
    CLIENT_ID: { Ref: UserClient }
    DYNAMODB_TABLE: ${self:service}-IoT-${sls:stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

functions:
  loginUser:
    handler: user/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
  signupUser:
    handler: user/signup.handler
    events:
      - http:
          path: signup
          method: post
          cors: true
  privateAPI:
    handler: user/private.handler
    events:
      - http:
          path: private
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  createUser:
    handler: user/create-user.handler
    events:
      - http: 
          path: user
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  getUser:
    handler: user/get-user.handler
    events:
      - http:
          path: user/{email}/{userId}
          method: get
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  updateUser:
    handler: user/update-user.handler
    events:
      - http:
          path: user
          method: put
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  deleteUser:
    handler: user/delete-user.handler
    events:
      - http:
          path: user/{email}/{userId}
          method: delete
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  createUserDetail:
    handler: user/create-user-detail.handler
    events:
      - http: 
          path: user/detail
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  getUserDetail:
      handler: user/get-user-detail.handler
      events:
        - http:
            path: user/detail/{userId}/{email}
            method: get
            authorizer:
              name: PrivateAuthorizer
              type: COGNITO_USER_POOLS
              arn:
                Fn::GetAtt:
                  - UserPool
                  - Arn
              claims:
                - email
  updateUserDetail:
    handler: user/update-user-detail.handler
    events:
      - http:
          path: user/detail
          method: put
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  deleteUserDetail:
    handler: user/delete-user-detail.handler
    events:
      - http:
          path: user/detail/{userId}/{email}
          method: delete
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
    IoTDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: metadata
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: metadata
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
